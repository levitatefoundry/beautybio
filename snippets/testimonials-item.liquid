{%- liquid
  assign product_image = block.settings.product.featured_media | default: block.settings.product.media[0].preview_image

  if block.settings.image != blank
    assign product_image = block.settings.image
  endif

  if image_size == "small"
    assign image_sizes_fraction = 0.30
  elsif image_size == "medium"
    assign image_sizes_fraction = 0.40
  elsif image_size == "large"
    assign image_sizes_fraction = 0.50
  endif

  # Generate a concise aria-label for the slide
  assign slide_label = block.settings.product.title | default: block.settings.quote | truncate: 50
  assign slide_label = slide_label | append: ' testimonial'
-%}

{% capture image_sizes_attribute -%}
  (min-width: 720px) calc((100vw - (2 * clamp(18px, 3.3vw, 3.3vw))) * {{ image_sizes_fraction }}), 83.3vw
{%- endcapture %}

{% capture product_image %}
  <figure class="testimonials__item-product">
    {%- capture wrapper_tag -%}
      {%- if block.settings.product != blank %}a{% else %}div{% endif -%}
    {%- endcapture -%}
    {%- capture wrapper_attributes -%}
      {%- if block.settings.product != blank -%}
        href="{{ block.settings.product.url }}" aria-label="{{ block.settings.product.title }} product"
      {%- endif -%}
    {%- endcapture -%}

    <{{ wrapper_tag }} {{ wrapper_attributes }}>
      {%
        render 'image' with
        image: product_image,
        wrapper_class: 'testimonials__item-product-image',
        aspect_ratio: block.settings.aspect_ratio,
        focal_point: block.settings.focal_point,
        include_placeholder: true,
        sizes: image_sizes_attribute
      %}
    </{{ wrapper_tag }}>

    {%- if block.settings.product != blank -%}
      <figcaption class="testimonials__item-product-title fs-product-card-title">
        {{ block.settings.product.title }}
      </figcaption>
    {%- endif -%}
  </figure>
{% endcapture %}

{% capture quote %}
  <div class="testimonials__item-content">
    {%- if block.settings.show_rating -%}
      <div class="testimonials__item-stars">
        {%- render 'star-rating', rating: block.settings.rating -%}
      </div>
    {%- endif -%}

    {%- if block.settings.quote != blank -%}
      <blockquote class="testimonials__item-quote {% if quote_font == 'heading' %}ff-subheading fs-heading-4-base fs-heading-3-base-above-720{% else %}ff-body fs-body-300 fs-body-350-above-720{% endif %}" tabindex="0">
        {{ block.settings.quote }}
      </blockquote>
    {%- endif -%}

    {%- if block.settings.author != blank -%}
      <cite class="testimonials__item-author ff-body fs-body-100 t-opacity-60">
        <span>{{ block.settings.author }}</span>
      </cite>
    {%- endif -%}
  </div>
{% endcapture %}

<div
  class="
    testimonials__item swiper-slide
    testimonials__item--image-{{ image_size }}
    testimonials__item--image-placement-{{ block.settings.image_position }}
    animation--item
  "
  id="testimonial-slide-{{ forloop.index0 }}"
  tabindex="0"
  aria-label="{{ slide_label }}"
  {% unless forloop.first %}
    inert
  {% endunless %}
  data-index="{{ forloop.index0 }}"
  {{ block.shopify_attributes }}
>
  {%- if block.settings.image_position == 'left' -%}
    {{ product_image }}
    {{ quote }}
  {%- else -%}
    {{ quote }}
    {{ product_image }}
  {%- endif -%}
</div>
<script>
  document.addEventListener('DOMContentLoaded', function () {
  // Ensure Swiper is initialized
  const swiperContainer = document.querySelector('.testimonials__carousel');
  if (!swiperContainer || !swiperContainer.swiper) {
    console.error('Swiper not initialized for .testimonials__carousel');
    return;
  }
  const swiper = swiperContainer.swiper;

  // Ensure navigation buttons are keyboard-accessible
  const nextButton = document.querySelector('.testimonials__navigation-button--next');
  const prevButton = document.querySelector('.testimonials__navigation-button--prev');
  if (nextButton) {
    nextButton.setAttribute('tabindex', '0');
    nextButton.setAttribute('role', 'button');
    nextButton.setAttribute('aria-label', 'Move to next carousel slide'); // Reinforce for clarity
  }
  if (prevButton) {
    prevButton.setAttribute('tabindex', '0');
    prevButton.setAttribute('role', 'button');
    prevButton.setAttribute('aria-label', 'Move to previous carousel slide');
  }

  // Handle focus on slide change
  swiper.on('slideChangeTransitionEnd', function () {
    // Get the active slide using realIndex for looped slides
    const activeIndex = swiper.realIndex;
    const activeSlide = swiper.slides.find(slide => slide.getAttribute('data-swiper-slide-index') == activeIndex);

    if (!activeSlide) {
      console.error('Active slide not found for realIndex:', activeIndex);
      return;
    }

    // Find the quote element
    const quoteElement = activeSlide.querySelector('.testimonials__item-quote');
    if (!quoteElement) {
      console.error('Quote element not found in active slide:', activeSlide);
      // Fallback to slide itself
      setTimeout(() => {
        activeSlide.focus();
        console.log('Focused on slide:', activeSlide.getAttribute('id'));
      }, 200);
      return;
    }

    // Move focus to the quote
    setTimeout(() => {
      quoteElement.focus();
      console.log('Focused on quote in slide:', activeSlide.getAttribute('id'), 'Quote text:', quoteElement.textContent.trim());
    }, 200); // Increased delay to ensure transition completion

    // Manage inert attributes
    swiper.slides.forEach(slide => {
      const isActive = slide.getAttribute('data-swiper-slide-index') == activeIndex;
      slide.setAttribute('inert', isActive ? null : '');
    });
  });
});
</script>